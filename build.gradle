buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.114'
	}
}

plugins {
	id "java"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "fabric-loom" version "0.5.43" apply false
	id "net.minecrell.licenser" version "0.4.1"
	id "org.ajoberstar.grgit" version "3.1.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

class Globals {
	static def baseVersion = "0.29.3"
	static def mcVersion = "1.16.4"
	static def yarnVersion = "+build.1"
	static def loaderVersion = "0.10.5+build.213"
}

version = Globals.baseVersion + "+" + (ENV.GITHUB_RUN_NUMBER ? "" : "local-") + getBranch()
logger.lifecycle("Building Fabric: " + version)

import org.apache.commons.codec.digest.DigestUtils
import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}

	def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	}

	return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(Globals.mcVersion).substring(0, 2)
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'dev') }
	project.dependencies {
		deps.each {
			compile it
		}
	}
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

class ModuleDeps {
	static def moduleDeps = new HashMap<String, List<String>>();
	static def moduleTestDeps = new HashMap<String, List<String>>();
}

def defineModule(String moduleName, String moduleVersion, List<String> deps, List<String> testDeps) {
	if ("0.0.0".equals(moduleVersion) || moduleVersion == null || moduleVersion.isEmpty()) {
		throw new Error("Missing version for module " + moduleName);
	}
	if (!new File(moduleName).isDirectory()) {
		throw new Error("Missing folder for module " + moduleName);
	}
	ModuleDeps.moduleDeps.put(moduleName, deps);
	ModuleDeps.moduleTestDeps.put(moduleName, testDeps);
	sourceSets {
		"$moduleName" {
			java {
				srcDir moduleName + "/src/main/java"
			}
			resources {
				srcDir moduleName + "/src/main/resources"
			}
			afterEvaluate {
				compileClasspath += sourceSets.main.compileClasspath;

				def visited = new HashSet<String>();
				def toVisit = new HashSet<String>();
				toVisit.addAll(deps);

				while (!toVisit.isEmpty()) {
					String dep = toVisit.iterator().next();
					toVisit.remove(dep);
					if (!visited.add(dep)) {
						continue;
					}
					compileClasspath += sourceSets[dep].output
					toVisit.addAll(ModuleDeps.moduleDeps.get(dep));
				}
			}
		}
		"${moduleName}Test" {
			java {
				srcDir moduleName + "/src/testmod/java"
			}
			resources {
				srcDir moduleName + "/src/testmod/resources"
			}
			afterEvaluate {
				compileClasspath += sourceSets[moduleName].compileClasspath
				compileClasspath += sourceSets[moduleName].output

				def visited = new HashSet<String>();
				def toVisit = new HashSet<String>();
				toVisit.addAll(deps);
				toVisit.addAll(testDeps);

				while (!toVisit.isEmpty()) {
					String dep = toVisit.iterator().next();
					toVisit.remove(dep);
					if (!visited.add(dep)) {
						continue;
					}
					compileClasspath += sourceSets[dep].output
					toVisit.addAll(ModuleDeps.moduleDeps.get(dep));
					toVisit.addAll(ModuleDeps.moduleTestDeps.get(dep));
				}
			}
		}
		testmod {
			runtimeClasspath += sourceSets[moduleName].output
			runtimeClasspath += sourceSets[moduleName + "Test"].output
		}
	}
	configurations {
		 "${moduleName}AnnotationProcessor" {}
		 "${moduleName}TestAnnotationProcessor" {}
	}

	task "jar-$moduleName"(type: Jar) {
		from sourceSets["$moduleName"].output
		destinationDir = file("${rootProject.buildDir}/dev-libs/")
		archiveFileName = "$moduleName-$moduleVersion-dev.jar"
	}

	task "sourcesJar-$moduleName"(type: Jar) {
		from sourceSets["$moduleName"].allSource
		destinationDir = file("${rootProject.buildDir}/dev-libs/")
		archiveFileName = "$moduleName-$moduleVersion-dev-sources.jar"
	}

	task "remapJar-$moduleName"(type: net.fabricmc.loom.task.RemapJarTask) {
		input = file("${rootProject.buildDir}/dev-libs/$moduleName-$moduleVersion-dev.jar")
		destinationDir = file("${rootProject.buildDir}/libs/")
		archiveFileName = "$moduleName-${moduleVersion}.jar"
		addNestedDependencies = false
		dependsOn tasks["jar-$moduleName"]
	}

	task "remapSourcesJar-$moduleName"(type: net.fabricmc.loom.task.RemapSourcesJarTask) {
		input = file("${rootProject.buildDir}/dev-libs/$moduleName-$moduleVersion-dev-sources.jar")
		output = file("${rootProject.buildDir}/libs/$moduleName-$moduleVersion-sources.jar")
		dependsOn tasks["sourcesJar-$moduleName"]
	}
	
	build.dependsOn tasks["remapJar-$moduleName"]
	build.dependsOn tasks["remapSourcesJar-$moduleName"]

	publishing {
		publications {
			"maven$moduleName"(MavenPublication) {
				artifactId moduleName
				version moduleVersion
				afterEvaluate {
					artifact(file("${project.buildDir}/libs/$moduleName-${moduleVersion}.jar")) {
						builtBy tasks["remapJar-$moduleName"]
					}

					artifact("${project.buildDir}/libs/$moduleName-$moduleVersion-sources.jar") {
						builtBy tasks["remapSourcesJar-$moduleName"]
						classifier "sources"
					}
				}
			}
		}
	}
}

allprojects {
	apply plugin: "checkstyle"
	apply plugin: "maven-publish"
	apply plugin: "fabric-loom"
	apply plugin: "net.minecrell.licenser"

	tasks.withType(JavaCompile).configureEach {
		def targetVersion = 8
		if (JavaVersion.current().isJava9Compatible()) {
			it.options.release = targetVersion
		} else {
			sourceCompatibility = JavaVersion.toVersion(targetVersion)
			targetCompatibility = JavaVersion.toVersion(targetVersion)
		}
	}

	group = "net.fabricmc.fabric-api"

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	task runTestmodClient(type: RunClientTask) {
		classpath sourceSets.testmod.runtimeClasspath
	}

	task runTestmodServer(type: RunServerTask) {
		classpath sourceSets.testmod.runtimeClasspath
	}

	dependencies {
		minecraft "com.mojang:minecraft:$Globals.mcVersion"
		mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
		modCompile "net.fabricmc:fabric-loader:${Globals.loaderVersion}"
	}

	configurations {
		dev
	}

	loom {
		shareCaches = true
	}

	repositories {
		mavenLocal()
	}

	jar {
		classifier = "dev"
	}

	if ("true".equals(single_project)) {
		// Module Deps
		// To configure a module, change something here

		defineModule("fabric-api-base", "0.2.0", [], ["fabric-command-api-v1", "fabric-lifecycle-events-v1"]);
		defineModule("fabric-biome-api-v1", "3.1.0", [], []);
		defineModule("fabric-blockrenderlayer-v1", "1.1.4", ["fabric-api-base"], []);
		defineModule("fabric-command-api-v1", "1.0.9", ["fabric-api-base"], []);
		defineModule("fabric-commands-v0", "0.2.1", ["fabric-api-base", "fabric-command-api-v1"], []);
		defineModule("fabric-containers-v0", "0.2.1", ["fabric-api-base", "fabric-networking-v0"], []);
		defineModule("fabric-content-registries-v0", "0.2.0", ["fabric-api-base", "fabric-lifecycle-events-v1", "fabric-resource-loader-v0"], []);
		defineModule("fabric-crash-report-info-v1", "0.1.2", [], []);
		defineModule("fabric-dimensions-v1", "2.0.1", ["fabric-api-base"], ["fabric-command-api-v1", "fabric-resource-loader-v0", "fabric-lifecycle-events-v1"]);
		defineModule("fabric-entity-events-v1", "1.0.2", ["fabric-api-base"], ["fabric-command-api-v1"]);
		defineModule("fabric-events-interaction-v0", "0.4.1", ["fabric-api-base"], []);
		defineModule("fabric-events-lifecycle-v0", "0.2.0", ["fabric-api-base", "fabric-item-api-v1", "fabric-lifecycle-events-v1"], []);
		defineModule("fabric-game-rule-api-v1", "1.0.5", [], ["fabric-api-base", "fabric-resource-loader-v0"]);
		defineModule("fabric-item-api-v1", "1.2.0", ["fabric-api-base"], []);
		defineModule("fabric-item-groups-v0", "0.2.2", ["fabric-api-base", "fabric-resource-loader-v0"], []);
		defineModule("fabric-key-binding-api-v1", "1.0.1", [], ["fabric-api-base", "fabric-events-lifecycle-v0", "fabric-resource-loader-v0"]);
		defineModule("fabric-keybindings-v0", "0.2.0", ["fabric-key-binding-api-v1"], []);
		defineModule("fabric-lifecycle-events-v1", "1.2.0", ["fabric-api-base"], []);
		defineModule("fabric-loot-tables-v1", "1.0.1", ["fabric-api-base"], []);
		defineModule("fabric-mining-levels-v0", "0.1.2", ["fabric-api-base", "fabric-tag-extensions-v0", "fabric-tool-attribute-api-v1"], []);
		defineModule("fabric-models-v0", "0.2.0", ["fabric-api-base"], []);
		defineModule("fabric-networking-api-v1", "1.0.0", ["fabric-api-base"], ["fabric-command-api-v1", "fabric-lifecycle-events-v1", "fabric-key-binding-api-v1"]);
		defineModule("fabric-networking-blockentity-v0", "0.2.7", ["fabric-api-base"], []);
		defineModule("fabric-networking-v0", "0.3.1", ["fabric-api-base", "fabric-networking-api-v1"], []);
		defineModule("fabric-object-builder-api-v1", "1.9.2", ["fabric-api-base", "fabric-tool-attribute-api-v1"], ["fabric-command-api-v1"]);
		defineModule("fabric-particles-v1", "0.2.3", ["fabric-api-base", "fabric-textures-v0"], []);
		defineModule("fabric-registry-sync-v0", "0.7.3", ["fabric-api-base", "fabric-networking-api-v1"], []);
		defineModule("fabric-renderer-api-v1", "0.4.0", ["fabric-api-base"], []);
		defineModule("fabric-renderer-indigo", "0.4.3", ["fabric-api-base", "fabric-renderer-api-v1"], []);
		defineModule("fabric-renderer-registries-v1", "2.2.0", ["fabric-api-base"], ["fabric-lifecycle-events-v1"]);
		defineModule("fabric-rendering-data-attachment-v1", "0.1.4", ["fabric-api-base"], []);
		defineModule("fabric-rendering-fluids-v1", "0.1.12", ["fabric-api-base"], []);
		defineModule("fabric-rendering-v0", "1.1.1", ["fabric-api-base", "fabric-rendering-v1"], []);
		defineModule("fabric-rendering-v1", "1.5.0", ["fabric-api-base"], []);
		defineModule("fabric-resource-loader-v0", "0.4.1", [], ["fabric-api-base", "fabric-lifecycle-events-v1"]);
		defineModule("fabric-screen-handler-api-v1", "1.1.0", ["fabric-api-base", "fabric-networking-v0"], ["fabric-resource-loader-v0"]);
		defineModule("fabric-structure-api-v1", "1.1.3", [], []);
		defineModule("fabric-tag-extensions-v0", "1.1.0", ["fabric-api-base", "fabric-resource-loader-v0"], []);
		defineModule("fabric-textures-v0", "1.0.5", ["fabric-api-base"], []);
		defineModule("fabric-tool-attribute-api-v1", "1.2.5", ["fabric-api-base", "fabric-tag-extensions-v0"], ["fabric-object-builder-api-v1", "fabric-lifecycle-events-v1"]);

		// End of module configuration

		minecraft {
			// TODO: Either (1) join the access widener files before setting this
			// or (2) change loom to make it accept multiple access widener files

			// (1) is probably much easier to implement. 
			accessWidener = file('joined.accesswidener')
		}
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			from(sourceSets.main.resources.srcDirs) {
				include "fabric.mod.json"
				expand "version": project.version
			}

			from(sourceSets.main.resources.srcDirs) {
				exclude "fabric.mod.json"
			}
		}

		license {
			header rootProject.file("HEADER")
			include "**/*.java"
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier = "sources"
		from sourceSets.main.allSource
	}

	checkstyle {
		configFile = rootProject.file("checkstyle.xml")
		toolVersion = "8.31"
	}
}

javadoc {
	options {
		source = "8"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://guava.dev/releases/21.0/api/docs/",
				"https://asm.ow2.io/javadoc/",
				"https://docs.oracle.com/javase/8/docs/api/",
				"http://jenkins.liteloader.com/job/Mixin/javadoc/",
				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
				// Need to add minecraft jd publication etc once there is one available
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
	}

	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}

	classpath = sourceSets.main.compileClasspath
	include("**/api/**")
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier = "fatjavadoc"
}

build.dependsOn javadocJar

// Runs a dedicated headless server with all test mods that closes once complete.
task runAutoTestServer(type: RunServerTask) {
	if ("true".equals(single_project)) {
		classpath sourceSets.testmod.runtimeClasspath
	} else {
		project.subprojects {
			classpath it.sourceSets.testmod.runtimeClasspath
		}
	}
	jvmArgs "-Dfabric.autoTest"
	args "--nogui"
}

subprojects {
	dependencies {
		testmodCompile sourceSets.main.output
	}

	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				afterEvaluate {
					artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
						builtBy remapMavenJar
					}

					artifact(sourcesJar) {
						builtBy remapSourcesJar
					}
				}
			}
		}

		setupRepositories(repositories)
	}

	javadoc.enabled = false
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-maven.jar"
		addNestedDependencies = false
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
				builtBy remapMavenJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar

			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}

	setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	if (ENV.MAVEN_URL) {
		repositories.maven {
			url ENV.MAVEN_URL
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	} else {
		repositories.maven {
			url "${rootProject.projectDir}/build/maven"
		}
	}
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

sourceSets {
	testmod
}

dependencies {
	afterEvaluate {
		subprojects.each {
			compile project(path: ":${it.name}", configuration: "dev")
			include project("${it.name}:")

			testmodCompile project("${it.name}:").sourceSets.testmod.output
		}
	}
}

curseforge {
	if (ENV.CURSEFORGE_API_KEY) {
		apiKey = ENV.CURSEFORGE_API_KEY
	}

	project {
		id = "306612"
		changelog = "A changelog can be found at https://github.com/FabricMC/fabric/commits"
		releaseType = "release"
		addGameVersion "1.16.4"
		addGameVersion "Fabric"

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[$Globals.mcVersion] Fabric API $Globals.baseVersion"
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapMavenJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("[$Globals.mcVersion] Fabric API $Globals.baseVersion")
		releaseBuilder.body("A changelog can be found at https://github.com/FabricMC/fabric/commits")
		releaseBuilder.commitish(getBranch())

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

github.mustRunAfter checkVersion
publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion
